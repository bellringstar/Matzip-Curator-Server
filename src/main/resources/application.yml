spring:
  datasource:
    master:
      jdbc-url: jdbc:mysql://${MYSQL_MASTER_HOST:localhost}:${MYSQL_MASTER_PORT:3306}/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
      username: ${MYSQL_USER}
      password: ${MYSQL_PASSWORD}
      driver-class-name: com.mysql.cj.jdbc.Driver
    replica:
      jdbc-url: jdbc:mysql://${MYSQL_REPLICA_HOST:localhost}:${MYSQL_REPLICA_PORT:3307}/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
      username: ${MYSQL_USER}
      password: ${MYSQL_PASSWORD}
      driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 50
        default_batch_fetch_size: 100
        dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: false
    defer-datasource-initialization: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: matzipcurator-group
      auto-offset-reset: earliest

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: your-google-client-id
            client-secret: your-google-client-secret
            scope: profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Google
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.data.elasticsearch.client.WIRE: TRACE

jwt:
  privateKey: ${JWT_PRIVATE_KEY}
  publicKey: ${JWT_PUBLIC_KEY}
  accessExpiration: ${JWT_ACCESS_EXPIRATION}
  refreshExpiration: ${JWT_REFRESH_EXPIRATION}
  issuer: ${JWT_ISSUER}
  audience: ${JWT_AUDIENCE}


management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics


app:
  elasticsearch:
    index-name: restaurants
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

naver:
  client:
    secret: ${NAVER_CLIENT_SECRET}
    id: ${NAVER_CLIENT_ID}

springdoc:
  swagger-ui:
    path: /swagger-ui.html
  api-docs:
    path: /v3/api-docs